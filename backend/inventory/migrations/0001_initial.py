# Generated by Django 3.2.9 on 2021-12-20 14:57

from django.db import migrations, models
import django.db.models.deletion
import inventory.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 8 to 16 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.'}, max_length=16, unique=True, validators=[inventory.validators.NameValueValidator()], verbose_name='Color name')),
                ('hexadecimal', models.CharField(error_messages={'blank': 'Colour field is mandatory.', 'invalid': 'Enter the correct colour value. It must be a 3/6 hexadecimal number with # character on begining.', 'null': 'Colour field is mandatory.'}, max_length=7, unique=True, validators=[inventory.validators.ColorValueValidator()], verbose_name='Color hexadecimal value')),
                ('description', models.CharField(default='Credentials description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 16 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[inventory.validators.DescriptionValueValidator()], verbose_name='Credentials description')),
            ],
            options={
                'verbose_name': 'Color',
                'verbose_name_plural': 'Colors',
            },
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 8 to 16 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.'}, max_length=16, unique=True, validators=[inventory.validators.NameValueValidator()], verbose_name='Credential name')),
                ('username', models.CharField(max_length=64, verbose_name='User login')),
                ('password', models.CharField(blank=True, max_length=64, null=True, verbose_name='User password')),
                ('description', models.CharField(default='Credentials description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 16 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[inventory.validators.DescriptionValueValidator()], verbose_name='Credentials description')),
            ],
            options={
                'verbose_name': 'Credential',
                'verbose_name_plural': 'Credentials',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('ssh_status', models.BooleanField(default=False)),
                ('https_status', models.BooleanField(default=False)),
                ('name', models.CharField(error_messages={'blank': 'Hostname field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 8 to 16 digits, letters and special characters -, _ or spaces.', 'null': 'Hostname field is mandatory.'}, max_length=32, unique=True, validators=[inventory.validators.HostnameValueValidator()], verbose_name='Device name')),
                ('hostname', models.CharField(error_messages={'blank': 'IP / DNS name field is mandatory.', 'invalid': 'Enter a valid IP address or DNS resolvable hostname. It must contain 8 to 32 digits, letters and special characters -, _, . or spaces.', 'null': 'IP / DNS name field is mandatory.'}, max_length=64, unique=True, validators=[inventory.validators.HostnameValueValidator()], verbose_name='IP / DNS name')),
                ('device_type', models.IntegerField(choices=[(0, 'Autodetect'), (1, 'Cisco IOS'), (2, 'Cisco XR'), (3, 'Cisco XE'), (4, 'Cisco NXOS'), (6, 'Cisco ASA')], default=0, verbose_name='Device type')),
                ('ico', models.IntegerField(choices=[(0, 'static/ico/model/device/switch.svg'), (1, 'static/ico/model/device/border_router.svg'), (2, 'static/ico/model/device/chassis.svg'), (3, 'static/ico/model/device/console.svg'), (4, 'static/ico/model/device/firewall.svg'), (5, 'static/ico/model/device/router.svg'), (6, 'static/ico/model/device/router_firewall.svg'), (7, 'static/ico/model/device/router_wifi_1.svg'), (8, 'static/ico/model/device/router_wifi_2.svg'), (9, 'static/ico/model/device/stack.svg'), (10, 'static/ico/model/device/stack_firewall_1.svg'), (11, 'static/ico/model/device/stack_firewall_2.svg'), (12, 'static/ico/model/device/switch.svg'), (13, 'static/ico/model/device/wifi-connection.svg'), (14, 'static/ico/model/device/wireless-router.svg')], default=0, verbose_name='Device graphic')),
                ('ssh_port', models.IntegerField(default=22, verbose_name='SSH port')),
                ('https_port', models.IntegerField(default=443, verbose_name='HTTPS port')),
                ('description', models.CharField(default='Credentials description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 16 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[inventory.validators.DescriptionValueValidator()], verbose_name='Credentials description')),
                ('secret', models.CharField(blank=True, max_length=64, null=True, verbose_name='Cisco secret password')),
                ('token', models.CharField(blank=True, max_length=128, null=True, verbose_name='Device token')),
                ('certificate', models.BooleanField(default=False, verbose_name='Device certificate check')),
                ('credential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 8 to 16 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.'}, max_length=16, unique=True, validators=[inventory.validators.NameValueValidator()], verbose_name='Group name')),
                ('description', models.CharField(default='Credentials description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 16 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[inventory.validators.DescriptionValueValidator()], verbose_name='Credentials description')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
            },
        ),
        migrations.CreateModel(
            name='GroupDeviceRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.device')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.group')),
            ],
            options={
                'unique_together': {('device', 'group')},
            },
        ),
        migrations.AddField(
            model_name='group',
            name='devices',
            field=models.ManyToManyField(through='inventory.GroupDeviceRelation', to='inventory.Device'),
        ),
        migrations.CreateModel(
            name='DeviceData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('version', models.CharField(blank=True, max_length=64, null=True)),
                ('hostname', models.CharField(blank=True, max_length=64, null=True)),
                ('uptime', models.CharField(blank=True, max_length=64, null=True)),
                ('reload_reason', models.CharField(blank=True, max_length=64, null=True)),
                ('running_image', models.CharField(blank=True, max_length=64, null=True)),
                ('config_register', models.CharField(blank=True, max_length=64, null=True)),
                ('hardware_list', models.JSONField(blank=True, null=True)),
                ('serial_list', models.JSONField(blank=True, null=True)),
                ('mac_list', models.JSONField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.device')),
            ],
        ),
        migrations.CreateModel(
            name='ColorGroupRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.color')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.group')),
            ],
            options={
                'unique_together': {('group', 'color')},
            },
        ),
        migrations.CreateModel(
            name='ColorDeviceRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.color')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.device')),
            ],
            options={
                'unique_together': {('device', 'color')},
            },
        ),
        migrations.CreateModel(
            name='ColorCredentialRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.color')),
                ('credential', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.credential')),
            ],
            options={
                'unique_together': {('credential', 'color')},
            },
        ),
        migrations.AddField(
            model_name='color',
            name='credentials',
            field=models.ManyToManyField(blank=True, null=True, through='inventory.ColorCredentialRelation', to='inventory.Credential'),
        ),
        migrations.AddField(
            model_name='color',
            name='devices',
            field=models.ManyToManyField(blank=True, null=True, through='inventory.ColorDeviceRelation', to='inventory.Device'),
        ),
        migrations.AddField(
            model_name='color',
            name='groups',
            field=models.ManyToManyField(blank=True, null=True, through='inventory.ColorGroupRelation', to='inventory.Group'),
        ),
    ]
