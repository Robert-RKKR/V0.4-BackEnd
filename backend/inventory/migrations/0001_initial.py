# Generated by Django 3.2.9 on 2022-01-16 18:18

from django.db import migrations, models
import django.db.models.deletion
import inventory.validators
import main.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 4 to 32 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'ModelBase with this name already exists.'}, max_length=32, unique=True, validators=[main.validators.NameValueValidator()])),
                ('description', models.CharField(default='ModelBase description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[main.validators.DescriptionValueValidator()])),
                ('username', models.CharField(error_messages={'blank': 'Username field is mandatory.', 'invalid': 'Enter the correct username value.', 'null': 'Username field is mandatory.'}, max_length=64)),
                ('password', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'permissions': [],
                'abstract': False,
                'default_permissions': ['read', 'read_write'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 4 to 32 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'ModelBase with this name already exists.'}, max_length=32, unique=True, validators=[main.validators.NameValueValidator()])),
                ('description', models.CharField(default='ModelBase description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[main.validators.DescriptionValueValidator()])),
                ('ssh_status', models.BooleanField(default=False)),
                ('https_status', models.BooleanField(default=False)),
                ('hostname', models.CharField(error_messages={'blank': 'IP / DNS name field is mandatory.', 'invalid': 'Enter a valid IP address or DNS resolvable hostname. It must contain 4 to 32 digits, letters and special characters -, _, . or spaces.', 'null': 'IP / DNS name field is mandatory.', 'unique': 'Device with this hostname already exists.'}, max_length=32, unique=True, validators=[inventory.validators.HostnameValueValidator()])),
                ('ico', models.IntegerField(choices=[(0, 'static/ico/model/device/switch.svg'), (1, 'static/ico/model/device/border_router.svg'), (2, 'static/ico/model/device/chassis.svg'), (3, 'static/ico/model/device/console.svg'), (4, 'static/ico/model/device/firewall.svg'), (5, 'static/ico/model/device/router.svg'), (6, 'static/ico/model/device/router_firewall.svg'), (7, 'static/ico/model/device/router_wifi_1.svg'), (8, 'static/ico/model/device/router_wifi_2.svg'), (9, 'static/ico/model/device/stack.svg'), (10, 'static/ico/model/device/stack_firewall_1.svg'), (11, 'static/ico/model/device/stack_firewall_2.svg'), (12, 'static/ico/model/device/switch.svg'), (13, 'static/ico/model/device/wifi-connection.svg'), (14, 'static/ico/model/device/wireless-router.svg')], default=0)),
                ('ssh_port', models.IntegerField(default=22)),
                ('https_port', models.IntegerField(default=443)),
                ('secret', models.CharField(blank=True, max_length=64, null=True)),
                ('token', models.CharField(blank=True, max_length=128, null=True)),
                ('certificate', models.BooleanField(default=False)),
                ('credential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential')),
            ],
            options={
                'permissions': [],
                'abstract': False,
                'default_permissions': ['read', 'read_write'],
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 4 to 32 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'ModelBase with this name already exists.'}, max_length=32, unique=True, validators=[main.validators.NameValueValidator()])),
                ('description', models.CharField(default='ModelBase description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[main.validators.DescriptionValueValidator()])),
                ('value', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'permissions': [],
                'abstract': False,
                'default_permissions': ['read', 'read_write'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 4 to 32 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'ModelBase with this name already exists.'}, max_length=32, unique=True, validators=[main.validators.NameValueValidator()])),
                ('description', models.CharField(default='ModelBase description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[main.validators.DescriptionValueValidator()])),
                ('devices', models.ManyToManyField(to='inventory.Device')),
            ],
            options={
                'permissions': [],
                'abstract': False,
                'default_permissions': ['read', 'read_write'],
            },
        ),
        migrations.CreateModel(
            name='DeviceData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('version', models.CharField(blank=True, max_length=64, null=True)),
                ('hostname', models.CharField(blank=True, max_length=64, null=True)),
                ('uptime', models.CharField(blank=True, max_length=64, null=True)),
                ('reload_reason', models.CharField(blank=True, max_length=64, null=True)),
                ('running_image', models.CharField(blank=True, max_length=64, null=True)),
                ('config_register', models.CharField(blank=True, max_length=64, null=True)),
                ('hardware_list', models.JSONField(blank=True, null=True)),
                ('serial_list', models.JSONField(blank=True, null=True)),
                ('mac_list', models.JSONField(blank=True, null=True)),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='inventory.device')),
            ],
            options={
                'permissions': [],
                'abstract': False,
                'default_permissions': ['read', 'read_write'],
            },
        ),
        migrations.AddField(
            model_name='device',
            name='device_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.devicetype'),
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 4 to 32 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'ModelBase with this name already exists.'}, max_length=32, unique=True, validators=[main.validators.NameValueValidator()])),
                ('description', models.CharField(default='ModelBase description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[main.validators.DescriptionValueValidator()])),
                ('hexadecimal', models.CharField(error_messages={'blank': 'Colour field is mandatory.', 'invalid': 'Enter the correct colour value. It must be a 3/6 hexadecimal number with # character on begining.', 'null': 'Colour field is mandatory.', 'unique': 'Color with this hexadecimal value already exists.'}, max_length=7, unique=True, validators=[inventory.validators.ColorValueValidator()])),
                ('credentials', models.ManyToManyField(blank=True, to='inventory.Credential')),
                ('devices', models.ManyToManyField(blank=True, to='inventory.Device')),
                ('groups', models.ManyToManyField(blank=True, to='inventory.Group')),
            ],
            options={
                'permissions': [],
                'abstract': False,
                'default_permissions': ['read', 'read_write'],
            },
        ),
        migrations.CreateModel(
            name='DeviceRawData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('command_name', models.CharField(max_length=64)),
                ('command_data', models.TextField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.device')),
            ],
            options={
                'unique_together': {('device', 'command_name')},
            },
        ),
        migrations.CreateModel(
            name='DeviceInterface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('root', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('port', models.CharField(blank=True, max_length=64, null=True)),
                ('link_status', models.CharField(blank=True, max_length=64, null=True)),
                ('protocol_status', models.CharField(blank=True, max_length=64, null=True)),
                ('hardware_type', models.CharField(blank=True, max_length=64, null=True)),
                ('address', models.CharField(blank=True, max_length=64, null=True)),
                ('bia', models.CharField(blank=True, max_length=64, null=True)),
                ('description', models.CharField(blank=True, max_length=64, null=True)),
                ('ip_address', models.CharField(blank=True, max_length=64, null=True)),
                ('mtu', models.CharField(blank=True, max_length=64, null=True)),
                ('duplex', models.CharField(blank=True, max_length=64, null=True)),
                ('speed', models.CharField(blank=True, max_length=64, null=True)),
                ('media_type', models.CharField(blank=True, max_length=64, null=True)),
                ('bandwidth', models.CharField(blank=True, max_length=64, null=True)),
                ('delay', models.CharField(blank=True, max_length=64, null=True)),
                ('encapsulation', models.CharField(blank=True, max_length=64, null=True)),
                ('last_input', models.CharField(blank=True, max_length=64, null=True)),
                ('last_output', models.CharField(blank=True, max_length=64, null=True)),
                ('last_output_hang', models.CharField(blank=True, max_length=64, null=True)),
                ('queue_strategy', models.CharField(blank=True, max_length=64, null=True)),
                ('input_rate', models.CharField(blank=True, max_length=64, null=True)),
                ('output_rate', models.CharField(blank=True, max_length=64, null=True)),
                ('input_packets', models.CharField(blank=True, max_length=64, null=True)),
                ('output_packets', models.CharField(blank=True, max_length=64, null=True)),
                ('input_errors', models.CharField(blank=True, max_length=64, null=True)),
                ('crc', models.CharField(blank=True, max_length=64, null=True)),
                ('abort', models.CharField(blank=True, max_length=64, null=True)),
                ('output_errors', models.CharField(blank=True, max_length=64, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.device')),
            ],
            options={
                'unique_together': {('device', 'port')},
            },
        ),
    ]
